# This workflow should control anything to do with API
# Including tests, building the docker image and pushing it
# It should run on both development and production scenarios
# Production workflow (tagging the image as "latest") should run only on tagged version push

name: API workflow

on:
  workflow_dispatch:
  push:
    branches: [main]
    tags:
      - "v*.*.*"
    paths:
      # NOTE: Path filters are ignored for tag pushes
      - "src/api/**"
      - "tests/api/**"
  pull_request:
    branches: [main]
    paths:
      - "src/api/**"
      - "tests/api/**"
      - ".github/workflows/api.yml"

env:
  DOCKER_IMAGE_NAME: ohad24/${{ github.event.repository.name }}-api

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      MONGO_USERNAME: supercharge
      MONGO_PASSWORD: secret
      MONGO_DATABASE: test
      MONGO_URI: mongodb://supercharge:secret@localhost:27017/test?authSource=admin
    steps:
      - uses: actions/checkout@v3
      - name: Install OS dependencies
        run: |
          wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org-tools gnupg
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          pip install -r src/api/requirements.txt
      - name: Lint with flake8
        run: |
          # TODO: configure flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
      - name: "Download latest plants data file"
        run: gsutil cp $(gsutil ls gs://ef-prod-private/plants_data | sort -r | head -n 1) plants_data.json
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.8.0
        with:
          mongodb-version: 5
          mongodb-username: ${{ env.MONGO_USERNAME }}
          mongodb-password: ${{ env.MONGO_PASSWORD }}
          mongodb-db: ${{ env.MONGO_DATABASE }}
      - name: Load plants data
        run: mongoimport --uri ${{ env.MONGO_URI }} --collection plants --file plants_data.json --jsonArray
      - name: Test with pytest
        env:
          MONGO_URI: ${{ env.MONGO_URI }}
          CLOUD_BUCKET: ${{ secrets.CLOUD_BUCKET }}
        run: |
          export DETECT_API_SRV=$(gcloud run services describe ef-prod-detect-plant --region us-central1 --format=json | jq .status.url --raw-output)
          pytest -x --cov=src/api/ --cov-report=xml tests/api/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Metadata for Docker
        # Docs: https://github.com/docker/metadata-action
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}
            type=edge
            type=sha

      - name: Login to DockerHub
        # Docs: https://github.com/docker/login-action
        if: ${{ github.actor != 'dependabot[bot]' }}  # * dependabot[bot] doesn't have a Dockerhub secrets
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        # Docs: https://github.com/docker/build-push-action
        uses: docker/build-push-action@v4
        with:
          context: src/api
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    if: ${{ github.event_name != 'pull_request' }} # Deploy shouldn't run on PRs
    needs: [test, build] # This job will run only if other jobs were successful
    runs-on: ubuntu-latest
    steps:
      - name: Trigger deploy via SSH
        # Docs: https://github.com/appleboy/ssh-action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_DEPLOYMENT_HOST }}
          port: ${{ secrets.SSH_DEPLOYMENT_PORT }}
          username: ${{ secrets.SSH_DEPLOYMENT_USER }}
          key: ${{ secrets.SSH_DEPLOYMENT_KEY }}
